//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Pouce"",
            ""id"": ""2b0e3068-1f9a-45fa-8e6c-cf40d5e8d3c0"",
            ""actions"": [
                {
                    ""name"": ""JoystickLeft"",
                    ""type"": ""Value"",
                    ""id"": ""d17bd2f9-2d59-4d4a-ab0b-2b20addbfbf8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DPadRight"",
                    ""type"": ""Button"",
                    ""id"": ""6a712d09-367c-4de0-8b1e-0533cd5492d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LT"",
                    ""type"": ""Button"",
                    ""id"": ""432f2e01-90f4-4ef6-9066-619546beebb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickRight"",
                    ""type"": ""Value"",
                    ""id"": ""28222d89-b068-48ea-9d71-ee8196bea117"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""37052625-cc78-4d88-b6df-0aacb61c7e43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""aaea9fd5-5291-48a7-b6be-220691d37628"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""657fe7dd-ad59-42a3-984f-7afa61801a7e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DPadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4eabc74-fc22-4c1e-a029-52246e21f173"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""614e72e6-77b5-4372-a6c4-815a9f251593"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""285f8087-3250-41e2-8fbd-ea74b7c93228"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""599e11dd-42e8-4297-b2e8-2f20a03e4610"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a54fa36d-727d-40e9-9a9d-5e88a804c0d2"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pouce
        m_Pouce = asset.FindActionMap("Pouce", throwIfNotFound: true);
        m_Pouce_JoystickLeft = m_Pouce.FindAction("JoystickLeft", throwIfNotFound: true);
        m_Pouce_DPadRight = m_Pouce.FindAction("DPadRight", throwIfNotFound: true);
        m_Pouce_LT = m_Pouce.FindAction("LT", throwIfNotFound: true);
        m_Pouce_JoystickRight = m_Pouce.FindAction("JoystickRight", throwIfNotFound: true);
        m_Pouce_X = m_Pouce.FindAction("X", throwIfNotFound: true);
        m_Pouce_RT = m_Pouce.FindAction("RT", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pouce
    private readonly InputActionMap m_Pouce;
    private List<IPouceActions> m_PouceActionsCallbackInterfaces = new List<IPouceActions>();
    private readonly InputAction m_Pouce_JoystickLeft;
    private readonly InputAction m_Pouce_DPadRight;
    private readonly InputAction m_Pouce_LT;
    private readonly InputAction m_Pouce_JoystickRight;
    private readonly InputAction m_Pouce_X;
    private readonly InputAction m_Pouce_RT;
    public struct PouceActions
    {
        private @Player m_Wrapper;
        public PouceActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @JoystickLeft => m_Wrapper.m_Pouce_JoystickLeft;
        public InputAction @DPadRight => m_Wrapper.m_Pouce_DPadRight;
        public InputAction @LT => m_Wrapper.m_Pouce_LT;
        public InputAction @JoystickRight => m_Wrapper.m_Pouce_JoystickRight;
        public InputAction @X => m_Wrapper.m_Pouce_X;
        public InputAction @RT => m_Wrapper.m_Pouce_RT;
        public InputActionMap Get() { return m_Wrapper.m_Pouce; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PouceActions set) { return set.Get(); }
        public void AddCallbacks(IPouceActions instance)
        {
            if (instance == null || m_Wrapper.m_PouceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PouceActionsCallbackInterfaces.Add(instance);
            @JoystickLeft.started += instance.OnJoystickLeft;
            @JoystickLeft.performed += instance.OnJoystickLeft;
            @JoystickLeft.canceled += instance.OnJoystickLeft;
            @DPadRight.started += instance.OnDPadRight;
            @DPadRight.performed += instance.OnDPadRight;
            @DPadRight.canceled += instance.OnDPadRight;
            @LT.started += instance.OnLT;
            @LT.performed += instance.OnLT;
            @LT.canceled += instance.OnLT;
            @JoystickRight.started += instance.OnJoystickRight;
            @JoystickRight.performed += instance.OnJoystickRight;
            @JoystickRight.canceled += instance.OnJoystickRight;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
        }

        private void UnregisterCallbacks(IPouceActions instance)
        {
            @JoystickLeft.started -= instance.OnJoystickLeft;
            @JoystickLeft.performed -= instance.OnJoystickLeft;
            @JoystickLeft.canceled -= instance.OnJoystickLeft;
            @DPadRight.started -= instance.OnDPadRight;
            @DPadRight.performed -= instance.OnDPadRight;
            @DPadRight.canceled -= instance.OnDPadRight;
            @LT.started -= instance.OnLT;
            @LT.performed -= instance.OnLT;
            @LT.canceled -= instance.OnLT;
            @JoystickRight.started -= instance.OnJoystickRight;
            @JoystickRight.performed -= instance.OnJoystickRight;
            @JoystickRight.canceled -= instance.OnJoystickRight;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
        }

        public void RemoveCallbacks(IPouceActions instance)
        {
            if (m_Wrapper.m_PouceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPouceActions instance)
        {
            foreach (var item in m_Wrapper.m_PouceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PouceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PouceActions @Pouce => new PouceActions(this);
    public interface IPouceActions
    {
        void OnJoystickLeft(InputAction.CallbackContext context);
        void OnDPadRight(InputAction.CallbackContext context);
        void OnLT(InputAction.CallbackContext context);
        void OnJoystickRight(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
    }
}
